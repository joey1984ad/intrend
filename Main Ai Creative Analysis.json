{
  "name": "AI Analysis - 3-Node Solution",
  "description": "Complete AI analysis workflow optimized for 3 nodes to avoid execution issues",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "analyze-creatives",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "http://localhost:3000,https://intrend-pswh1dg2q-josephs-projects-4c670f3b.vercel.app,https://intrend-beta.vercel.app"
        }
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [0, 0],
      "webhookId": "ai-analysis-3-node-solution"
    },
    {
      "parameters": {
        "jsCode": "// Complete AI analysis processing in a single node\nconst data = $json;\nconst sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\nconsole.log(`üîç [${sessionId}] Processing complete AI analysis:`, JSON.stringify(data, null, 2));\n\n// Enhanced validation with detailed error messages\nif (!data.accessToken) {\n  return {\n    json: {\n      status: 'error',\n      message: 'Access token is required for AI analysis',\n      sessionId: sessionId,\n      timestamp: new Date().toISOString(),\n      receivedData: data\n    }\n  };\n}\n\nif (!data.creativeId) {\n  return {\n    json: {\n      status: 'error',\n      message: 'Creative ID is required for AI analysis',\n      sessionId: sessionId,\n      timestamp: new Date().toISOString(),\n      receivedData: data\n    }\n  };\n}\n\nif (!data.adAccountId) {\n  return {\n    json: {\n      status: 'error',\n      message: 'Ad account ID is required for AI analysis',\n      sessionId: sessionId,\n      timestamp: new Date().toISOString(),\n      receivedData: data\n    }\n  };\n}\n\n// Extract and process creative data\nlet imageUrl = data.imageUrl || data.thumbnailUrl;\n\nif (!imageUrl) {\n  return {\n    json: {\n      error: \"No image URL found\",\n      message: \"Creative has no image content for AI analysis\",\n      sessionId: sessionId,\n      creativeId: data.creativeId || 'unknown',\n      availableFields: Object.keys(data),\n      timestamp: new Date().toISOString()\n    }\n  };\n}\n\n// Build tokenized URL for AI analysis\nfunction appendAccessTokenToImageUrl(imageUrl, accessToken) {\n  if (!imageUrl || !accessToken) return imageUrl;\n  \n  const facebookDomains = [\n    'fbcdn.net', 'fbsbx.com', 'facebook.com', 'fb.com',\n    'instagram.com', 'cdninstagram.com', 'igcdn.com'\n  ];\n  \n  const isFacebookCDN = facebookDomains.some(domain => imageUrl.includes(domain));\n  \n  if (!isFacebookCDN) {\n    console.log(`‚ÑπÔ∏è [${sessionId}] URL is not from Facebook CDN, skipping tokenization:`, imageUrl);\n    return imageUrl;\n  }\n  \n  if (imageUrl.includes('access_token=')) {\n    console.log(`‚ÑπÔ∏è [${sessionId}] URL already has access token, skipping tokenization`);\n    return imageUrl;\n  }\n  \n  const separator = imageUrl.includes('?') ? '&' : '?';\n  const tokenizedUrl = `${imageUrl}${separator}access_token=${accessToken}`;\n  \n  console.log(`‚úÖ [${sessionId}] Successfully tokenized URL for AI analysis`);\n  return tokenizedUrl;\n}\n\nconst tokenizedImageUrl = appendAccessTokenToImageUrl(imageUrl, data.accessToken);\n\n// Prepare complete data for AI analysis\nconst completeData = {\n  id: data.creativeId,\n  name: data.creativeName || 'Unnamed Creative',\n  status: 'active',\n  imageUrl: imageUrl,\n  tokenizedImageUrl: tokenizedImageUrl,\n  image_hash: null,\n  body: data.creativeName || '',\n  title: data.creativeName || '',\n  callToAction: 'learn_more',\n  creativeType: data.creativeType || 'image',\n  analysisContext: {\n    adAccountId: data.adAccountId,\n    accessToken: data.accessToken,\n    creativeId: data.creativeId,\n    sessionId: sessionId\n  },\n  metadata: {\n    originalData: data,\n    extractedAt: new Date().toISOString(),\n    processingMethod: 'complete_3_node_workflow',\n    workflowVersion: '3-node-solution'\n  },\n  processingMetadata: {\n    processingId: `${data.creativeId}_${Date.now()}`,\n    processingStartTime: Date.now(),\n    originalImageUrl: imageUrl,\n    tokenizedImageUrl: tokenizedImageUrl,\n    tokenizationSuccess: tokenizedImageUrl !== imageUrl,\n    facebookCDN: imageUrl.includes('fbcdn.net') || imageUrl.includes('facebook.com')\n  }\n};\n\nconsole.log(`‚úÖ [${sessionId}] Complete AI analysis data prepared successfully`);\nconsole.log(`üîó [${sessionId}] Tokenized URL:`, tokenizedImageUrl);\n\nreturn {\n  json: completeData\n};"
      },
      "id": "complete-ai-processor",
      "name": "Complete AI Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [200, 0]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"status\":\"success\",\"message\":\"Complete AI analysis completed\",\"timestamp\":\"{{ $now.toISO() }}\",\"aiAnalysisData\":\"{{ JSON.stringify($json) }}\",\"workflowVersion\":\"3-node-solution\"}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [400, 0]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Complete AI Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Complete AI Processor": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3-node-solution",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "ai-analysis-3-node-solution"
}